function mylog(msg,...)
	get_console():execute(string.gsub(string.format(msg,...)," ","_"))
end

ident = time_global()
cout("actor binder is loaded time is %d",ident)

function init    (obj)
				xr_motivator.AddToMotivator(obj)
end

function actor_init    (npc)
	npc:bind_object(actor_binder(npc))
end

local game_difficulty_by_num = {
				[0] = "gd_novice",
				[1] = "gd_stalker",
				[2] = "gd_veteran",
				[3] = "gd_master"
				}

local weapon_hide = {}
local primary_objects_filled = false
local object_to_update = nil
function get_object()
	return object_to_update
end
----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init (obj) super(obj)

	cout("common data server? %s dedicated? %s",tostring(level.is_server()),tostring(level.is_dedicated()))
	--все апгрейды весят на серверном объекте, т.е. CActor'e
	object_to_update = self
	mp_db.setup_update(self)

	mp_db.add_admin(self.object)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
	mylog("actor net_spawn")
	
	if object_binder.net_spawn(self,data) == false then
		return false
	end
	mp_db.is_admin(true)
	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()
	mylog("actor net_destroy")

	self.object:set_callback(callback.inventory_info, nil)
	self.object:set_callback(callback.article_info, nil)
	self.object:set_callback(callback.on_item_take, nil)
	self.object:set_callback(callback.on_item_drop, nil)
	self.object:set_callback(callback.task_state, nil)
	self.object:set_callback(callback.level_border_enter, nil)
	self.object:set_callback(callback.level_border_exit, nil)
	self.object:set_callback(callback.take_item_from_box, nil)
	self.object:set_callback(callback.use_object, nil)

	object_binder.net_destroy(self)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
	mylog("actor reinit")
	object_binder.reinit(self)

	self.object:set_callback(callback.inventory_info, self.info_callback, self)
	self.object:set_callback(callback.on_item_take, self.on_item_take, self)
	self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
	self.object:set_callback(callback.trade_sell_buy_item, self.on_trade, self) -- for game stats
	self.object:set_callback(callback.task_state, self.task_callback, self)
	self.object:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
	self.object:set_callback(callback.use_object, self.use_inventory_item, self)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:take_item_from_box(box, item)
	local box_name = box:name()
end

----------------------------------------------------------------------------------------------------------------------
function actor_binder:info_callback(npc, info_id)
	printf("*INFO*: npc='%s' id='%s'", npc:name(), info_id)
	--' Сюжет
	-- Отметки на карте
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_trade (item, sell_bye, money)
	if sell_bye == true then
		 game_stats.money_trade_update (money)
	else
		 game_stats.money_trade_update (-money)
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:article_callback(npc, group, name)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_take (obj)
	printf("on_item_take [%s]", obj:name())
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_drop (obj)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:task_callback(_task, _state)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:update(delta)
	object_binder.update(self, delta)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
	set_save_marker(packet, "save", false, "actor_binder")
	object_binder.save(self, packet)
	--' Сохраняем уровень сложности
	packet:w_u8(level.get_game_difficulty())
	--' Сохраняем данные об отключенном вводе
	if self.st.disable_input_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		utils.w_CTime(packet, self.st.disable_input_time)
	end
	xr_logic.pstor_save_all(self.object, packet)
	self.weather_manager:save(packet)
	release_body_manager.get_release_body_manager():save(packet)
	self.surge_manager:save(packet)
	sr_psy_antenna.save( packet )
	packet:w_bool(sim_board.get_sim_board().simulation_started)

	xr_sound.actor_save(packet)
	packet:w_stringZ(tostring(self.last_level_name))
	xr_statistic.save(packet)
	treasure_manager.get_treasure_manager():save(packet)

	local n = 0
	for k,v in pairs(db.script_ids) do
		n = n + 1
	end
	packet:w_u8(n)
	for k,v in pairs (db.script_ids) do
		packet:w_u16(k)
		packet:w_stringZ(v)
	end
	task_manager.get_task_manager():save(packet)

--	packet:w_bool(self.actor_weapon_on_start)
	
	packet:w_u8(self.object:active_slot())


	local deimos_exist = false
	for k,v in pairs(db.zone_by_name) do
		if(db.storage[v:id()] and db.storage[v:id()].active_scheme=="sr_deimos") then
			deimos_exist = true
			packet:w_bool(true)
			packet:w_float(db.storage[v:id()].sr_deimos.intensity)
		end
	end
	if not deimos_exist then
		packet:w_bool(false)
	end

	if self.last_detective_achievement_spawn_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		utils.w_CTime(packet, self.last_detective_achievement_spawn_time)
	end
	if self.last_mutant_hunter_achievement_spawn_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		utils.w_CTime(packet, self.last_mutant_hunter_achievement_spawn_time)
	end
	set_save_marker(packet, "save", true, "actor_binder")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:load(reader)
	set_save_marker(reader, "load", false, "actor_binder")
	object_binder.load(self, reader)
	--' Загружаем уровень сложности
	local game_difficulty = reader:r_u8()
	printf("load game_difficulty %s", tostring(game_difficulty))
	get_console():execute("g_game_difficulty "..game_difficulty_by_num[game_difficulty])
	local stored_input_time = reader:r_u8()
	if stored_input_time == true then
		self.st.disable_input_time = utils.r_CTime(reader)
	end
	xr_logic.pstor_load_all(self.object, reader)
	self.weather_manager:load(reader)
	release_body_manager.get_release_body_manager():load(reader)
--	self.surge_manager:initialize()
	self.surge_manager:load(reader)
	self.f_surge_manager_loaded = true
	sr_psy_antenna.load(reader)
	sim_board.get_sim_board().simulation_started = reader:r_bool()

	xr_sound.actor_load(reader)
	local n = reader:r_stringZ()
	if(n~="nil") then
		self.last_level_name = n
	end
	xr_statistic.load(reader)
	treasure_manager.get_treasure_manager():load(reader)
	n = reader:r_u8()
	for i = 1,n do
		db.script_ids[reader:r_u16()] = reader:r_stringZ()
	end

	task_manager.get_task_manager():load(reader)

--	self.actor_weapon_on_start = reader:r_bool()
	
	self.loaded_active_slot = reader:r_u8()
	
	self.loaded_slot_applied = false

	local b = reader:r_bool()
	if(b) then
		self.deimos_intensity = reader:r_float()
	end

	local stored_achievement_time = reader:r_bool()
	if stored_achievement_time == true then
		self.last_detective_achievement_spawn_time = utils.r_CTime(reader)
	end
	stored_achievement_time = reader:r_bool()
	if stored_achievement_time == true then
		self.last_mutant_hunter_achievement_spawn_time = utils.r_CTime(reader)
	end
	set_save_marker(reader, "load", true, "actor_binder")
end

--*************************************************************
--*					Подспаун вещей в ящики					  *
--*************************************************************
local detective_achievement_items 		= {	"medkit",
											"antirad",
											"bandage"}

local mutant_hunter_achievement_items	= {	"ammo_5.45x39_ap",
											"ammo_5.56x45_ap",
											"ammo_9x39_ap",
											"ammo_5.56x45_ap",
											"ammo_12x76_zhekan"}

local function spawn_achivement_items(items_table, count, inv_box_story_id)
	local inv_box = alife():object(get_story_object_id(inv_box_story_id))
	for i = 1,count do
		alife():create(items_table[math.random(#items_table)],
						inv_box.position,
						inv_box.m_level_vertex_id,
						inv_box.m_game_vertex_id,
						inv_box.id)
	end
end

function actor_binder:check_detective_achievement()
	if not has_alife_info("detective_achievement_gained") then
		return
	end
	if self.last_detective_achievement_spawn_time == nil then
		self.last_detective_achievement_spawn_time = game.get_game_time()
	end
	if game.get_game_time():diffSec(self.last_detective_achievement_spawn_time) > 43200 then
		spawn_achivement_items(detective_achievement_items, 4, "zat_a2_actor_treasure")
		xr_effects.send_tip(db.actor, nil, {"st_detective_news","got_medicine"})
		self.last_detective_achievement_spawn_time = game.get_game_time()
	end
end

function actor_binder:check_mutant_hunter_achievement()
	if not has_alife_info("mutant_hunter_achievement_gained") then
		return
	end
	if self.last_mutant_hunter_achievement_spawn_time == nil then
		self.last_mutant_hunter_achievement_spawn_time = game.get_game_time()
	end
	if game.get_game_time():diffSec(self.last_mutant_hunter_achievement_spawn_time) > 43200 then
		spawn_achivement_items(mutant_hunter_achievement_items, 5, "jup_b202_actor_treasure")
		xr_effects.send_tip(db.actor, nil, {"st_mutant_hunter_news","got_ammo"})
		self.last_mutant_hunter_achievement_spawn_time = game.get_game_time()
	end

end

----------------------------------------------------------------------------------------------------------------------

function check_for_weapon_hide_by_zones()
	for k,v in pairs(weapon_hide) do
		if v == true then
			return true
		end
	end
	return false
end

-- Weapon functions
function hide_weapon(zone_id)
	printf("[WEAPON_CONTROL]:hiding weapon from zone [%s] in section [%s]!!!", zone_id, db.storage[zone_id].active_section)
	weapon_hide[zone_id] = true
end

function restore_weapon(zone_id)
	printf("[WEAPON_CONTROL]:restoring weapon from zone [%s] in section [%s]!!!", zone_id, db.storage[zone_id].active_section)
	weapon_hide[zone_id] = false
end










