local fname = "mp_mutants_rush"
local __global = nil



--[[

Нет желания описывать каждую функцию, поэтому напишу лишь главную идею

1. Устанавливаем необходимые обработчики событий
2. Загружаем если нужно необходимые данные
3. Начинаем обратные отсчет до старта, устанавливая таймер на секунду каждый раз и отсылая клиентам событие mr_cl_prepare
4. Когда раунд начинается вызываем CMutantsRush::respawn() и отсылаем клиентам сигнал mr_cl_round_started
5. При убийстве проверяем кто убил и если это мы, то даем денег
6. Если мутанты начали кончаться, отправляем mr_sv_respawn																				!!!!ПЛОХОЕ ПОВЕДЕНИЕ - чем больше клиентов, тем больше будет отсылаться сообщений =/

--]]



class "CMutantsRush"

function CMutantsRush:__init()
	cout("CMutantsRush:__init %s",tostring(mp_db.is_admin()))
	self.ready_to_spawn = false
	self.mutants_at_map = 0
	self:load_settings()
	
	
	mp_db.getEH():callAtEvent("mr_sv_prepare",function (data) mp_mutants_rush.get():sv_prepare_event(data) end)
	mp_db.getEH():callAtEvent("mr_cl_prepare",function (data) mp_mutants_rush.get():prepareTimer(data) end)
	mp_db.getEH():callAtEvent("mr_cl_killed",function (data) mp_mutants_rush.get():killed(data) end)
	mp_db.getEH():callAtEvent("mr_cl_round_started",function (data) mp_mutants_rush.get():cl_round_started() end)
	mp_db.getEH():callAtEvent("mr_sv_respawn",function (data) mp_mutants_rush.get():respawn(data) end)
	if level.is_server() then
		mp_timer.get():add({ms=5*1000,callback = function() mp_mutants_rush.get():sv_prepare_event() end})
	end

	self.prepare_counter = self.prepare_time

	cout("init end")
end

function CMutantsRush:load_settings()
	cout("CMutantsRush:load_settings")
	local ltx = ini_file("mp_mutants_rush.ltx")
	
	self.prepare_time = mp_ltx.ltx_read_u32(ltx,fname,"prepare_time")
	self.time_for_wave = mp_ltx.ltx_read_u32(ltx,fname,"time_for_each_wave")
	self.min_mutants_at_map = mp_ltx.ltx_read_u32(ltx,fname,"min_mutants_at_map")
	cout("CMutantsRush:load_settings end")
end

function CMutantsRush:update()
end

function CMutantsRush:killed(data)

	cout("CMutantsRush:killed pure event '%s'",data)
	local who_name = string.sub(data,0,string.find(data,"#")-1)
	local victrim_section_name = string.sub(data,string.find(data,"#")+1)
	cout("killed callback %s %s",who_name,victrim_section_name)
	
	local obj = level.object_by_id(level.get_local_player_id())
	
	if obj and obj:name() == who_name then
		local st = get_hud():GetCustomStatic("mp_killed")
		if not st then
			get_hud():AddCustomStatic("mp_killed",true)
			st = get_hud():GetCustomStatic("mp_killed")
		end
		st:wnd():TextControl():SetText("You just killed "..victrim_section_name.."")
		level.add_money_mp(level.get_local_player_id(),100)
	else
		local st = get_hud():GetCustomStatic("mp_killed")
		if not st then
			get_hud():AddCustomStatic("mp_killed",true)
			st = get_hud():GetCustomStatic("mp_killed")
		end
		st:wnd():TextControl():SetText(who_name.." just killed "..victrim_section_name.."")
	end
	
	self.mutants_at_map = self.mutants_at_map - 1
	if self.mutants_at_map < self.min_mutants_at_map then
		mp_db.getEH():send("mr_sv_respawn","")
	end
end

function CMutantsRush:sv_prepare_event()
	self.prepare_counter = self.prepare_counter - 1
	mp_db.getEH():send("mr_cl_prepare",tostring(self.prepare_counter))
	if self.prepare_counter ~= 0 then
		mp_timer.get():add({ms=1*1000,callback = function() mp_mutants_rush.get():sv_prepare_event() end})
	else
		mp_db.getEH():send("mr_cl_round_started","")
		self:respawn()
	end
end

function CMutantsRush:cl_round_started()
	if not level.is_server() or not level.is_dedicated() then
	
		local st = get_hud():GetCustomStatic("mp_prepare_to_battle")
		if not st then
			get_hud():AddCustomStatic("mp_prepare_to_battle",true)
			st = get_hud():GetCustomStatic("mp_prepare_to_battle")
		end
		st:wnd():TextControl():SetText("Round stated!")
	end
end

function CMutantsRush:respawn()
	if not level.is_server() then
		cout("that is not a server!")
		return
	end
	self.ready_to_spawn = true
	cout("CMutantsRush:respawn %s",tostring(mp_db.is_admin()))
	
	for id,obj in pairs(db.smart_terrain_by_id) do
		if obj.respawn_params then
		
			local count = obj:call_respawn()
			cout("spawned %d",count)
			
			self.mutants_at_map = self.mutants_at_map + count

		end
	end
	self.ready_to_spawn = false
	cout("Now at map %d squards, minimal %d",self.mutants_at_map,self.min_mutants_at_map)
end

function CMutantsRush:prepareTimer(data)
	--По идее вызовется только на стороне клиента, надо проверить
	if not level.is_server() or not level.is_dedicated() then
	
		local st = get_hud():GetCustomStatic("mp_prepare_to_battle")
		if not st then
			get_hud():AddCustomStatic("mp_prepare_to_battle",true)
			st = get_hud():GetCustomStatic("mp_prepare_to_battle")
		end
		st:wnd():TextControl():SetText(data.." seconds to start")
	end

end


function get()
	if not __global then
		cout("creating CMutantsRush")
		__global = CMutantsRush()
	end
	return __global
end


function setup()
	mp_mutants_rush.get()
end
